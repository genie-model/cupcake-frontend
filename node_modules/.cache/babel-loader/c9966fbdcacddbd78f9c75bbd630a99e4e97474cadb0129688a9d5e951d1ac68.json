{"ast":null,"code":"var _jsxFileName = \"/home/ravitheja/cupcake-frontend/src/components/FileStructure.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport caretRight from \"bootstrap-icons/icons/caret-right.svg\";\nimport caretDown from \"bootstrap-icons/icons/caret-down.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobIcon = ({\n  heading,\n  childExist,\n  isOpen,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    style: {\n      cursor: \"pointer\"\n    },\n    children: [childExist && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: isOpen ? caretDown : caretRight,\n      alt: \"caret icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), heading]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = JobIcon;\nconst RenderNode = ({\n  level,\n  heading,\n  childExist,\n  isOpen,\n  onClick\n}) => {\n  const marginLeft = 2 * level + \"rem\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft\n    },\n    children: /*#__PURE__*/_jsxDEV(JobIcon, {\n      heading: heading,\n      childExist: childExist,\n      isOpen: isOpen,\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c2 = RenderNode;\nconst RenderTree = ({\n  node,\n  level,\n  expandedNodes,\n  toggleNode\n}) => {\n  if (!node) return null;\n  const isOpen = expandedNodes[node.heading];\n  const hasChild = node.child && Object.keys(node.child).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RenderNode, {\n      level: level,\n      heading: node.heading,\n      childExist: hasChild,\n      isOpen: isOpen,\n      onClick: () => toggleNode(node.heading)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isOpen && hasChild && Object.keys(node.child).map(key => /*#__PURE__*/_jsxDEV(RenderTree, {\n      node: node.child[key],\n      level: level + 1,\n      expandedNodes: expandedNodes,\n      toggleNode: toggleNode\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c3 = RenderTree;\nconst FileStructure = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/jobs\");\n        const jobList = response.data.jobs.map(job => ({\n          heading: job.name,\n          child: {}\n        }));\n        setJobs(jobList);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    fetchJobs();\n  }, []);\n  const toggleNode = heading => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [heading]: !prev[heading]\n    }));\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-dir-container\",\n    children: [/*#__PURE__*/_jsxDEV(JobIcon, {\n      heading: \"My Jobs\",\n      childExist: true,\n      isOpen: expandedNodes[\"My Jobs\"],\n      onClick: () => toggleNode(\"My Jobs\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), expandedNodes[\"My Jobs\"] && jobs.map((job, index) => /*#__PURE__*/_jsxDEV(RenderTree, {\n      node: job,\n      level: 1,\n      expandedNodes: expandedNodes,\n      toggleNode: toggleNode\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(FileStructure, \"yuvqOQV7HZrMxyMDXFxusxU7iJo=\");\n_c4 = FileStructure;\nexport default FileStructure;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"JobIcon\");\n$RefreshReg$(_c2, \"RenderNode\");\n$RefreshReg$(_c3, \"RenderTree\");\n$RefreshReg$(_c4, \"FileStructure\");","map":{"version":3,"names":["React","useState","useEffect","axios","caretRight","caretDown","jsxDEV","_jsxDEV","JobIcon","heading","childExist","isOpen","onClick","style","cursor","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","RenderNode","level","marginLeft","_c2","RenderTree","node","expandedNodes","toggleNode","hasChild","child","Object","keys","length","map","key","_c3","FileStructure","_s","jobs","setJobs","setExpandedNodes","error","setError","fetchJobs","response","get","jobList","data","job","name","err","message","prev","className","index","_c4","$RefreshReg$"],"sources":["/home/ravitheja/cupcake-frontend/src/components/FileStructure.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport caretRight from \"bootstrap-icons/icons/caret-right.svg\";\nimport caretDown from \"bootstrap-icons/icons/caret-down.svg\";\n\nconst JobIcon = ({ heading, childExist, isOpen, onClick }) => {\n  return (\n    <div onClick={onClick} style={{ cursor: \"pointer\" }}>\n      {childExist && (\n        <img src={isOpen ? caretDown : caretRight} alt=\"caret icon\" />\n      )}\n      {heading}\n    </div>\n  );\n};\n\nconst RenderNode = ({ level, heading, childExist, isOpen, onClick }) => {\n  const marginLeft = 2 * level + \"rem\";\n  return (\n    <div style={{ marginLeft }}>\n      <JobIcon\n        heading={heading}\n        childExist={childExist}\n        isOpen={isOpen}\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n\nconst RenderTree = ({ node, level, expandedNodes, toggleNode }) => {\n  if (!node) return null;\n\n  const isOpen = expandedNodes[node.heading];\n  const hasChild = node.child && Object.keys(node.child).length > 0;\n\n  return (\n    <div>\n      <RenderNode\n        level={level}\n        heading={node.heading}\n        childExist={hasChild}\n        isOpen={isOpen}\n        onClick={() => toggleNode(node.heading)}\n      />\n      {isOpen &&\n        hasChild &&\n        Object.keys(node.child).map((key) => (\n          <RenderTree\n            key={key}\n            node={node.child[key]}\n            level={level + 1}\n            expandedNodes={expandedNodes}\n            toggleNode={toggleNode}\n          />\n        ))}\n    </div>\n  );\n};\n\nconst FileStructure = () => {\n  const [jobs, setJobs] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/jobs\");\n        const jobList = response.data.jobs.map((job) => ({\n          heading: job.name,\n          child: {},\n        }));\n        setJobs(jobList);\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n\n    fetchJobs();\n  }, []);\n\n  const toggleNode = (heading) => {\n    setExpandedNodes((prev) => ({\n      ...prev,\n      [heading]: !prev[heading],\n    }));\n  };\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"file-dir-container\">\n      <JobIcon\n        heading=\"My Jobs\"\n        childExist={true}\n        isOpen={expandedNodes[\"My Jobs\"]}\n        onClick={() => toggleNode(\"My Jobs\")}\n      />\n      {expandedNodes[\"My Jobs\"] &&\n        jobs.map((job, index) => (\n          <RenderTree\n            key={index}\n            node={job}\n            level={1}\n            expandedNodes={expandedNodes}\n            toggleNode={toggleNode}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default FileStructure;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}